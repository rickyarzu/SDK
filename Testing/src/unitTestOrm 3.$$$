unit unitTestOrm;

interface
uses
  DUnitX.TestFramework, Janua.Orm.Intf, Janua.Orm.Types;

type

  [TestFixture]
  TOrmTest = class(TObject) 
  public
    [Setup]
    procedure Setup;
    [TearDown]
    procedure TearDown;
    // Sample Methods
    // Simple single Test
    [Test]
    procedure IntegerField;
    procedure FloatField;
    // Test with TestCase Attribute to supply parameters.
  end;

implementation

uses Janua.Orm.Impl, System.JSON;

procedure TOrmTest.Setup;
begin
end;

procedure TOrmTest.TearDown;
begin
end;

procedure TOrmTest.FloatField;
var
  a: Janua.Orm.Intf.IJanuaField;
  aObject: TJsonObject;
begin
  a := Janua.Orm.Impl.TJanuaOrmFactory.CreateDoubleField('test', 'test');
  a.AsInteger := 1;
  a.AsDateTime := 1.0;
  Assert.AreEqual(1, a.AsInteger);
  a.Value := 1;
  Assert.AreEqual(1, a.AsInteger);
  a.AsFloat := 1;
  Assert.AreEqual(1, a.AsInteger);
  a.AsLargeInt := 1;
  Assert.AreEqual(1, a.AsInteger);
  aObject := TJsonObject.Create;
  try
    a.WriteJsonValue(aObject);
    a.Value := 0;
    Assert.AreEqual(0, a.AsInteger);
    a.ReadJsonValue(aObject);
    Assert.AreEqual(1, a.AsInteger);
  finally
    aObject.Free
  end;


end;

procedure TOrmTest.IntegerField;
var
  a: Janua.Orm.Intf.IJanuaField;
  aObject: TJsonObject;
begin
  a := Janua.Orm.Impl.TJanuaOrmFactory.CreateIntegerField('test', 'test');
  a.AsInteger := 1;
  a.AsDateTime := 1.0;
  Assert.AreEqual(1, a.AsInteger);
  a.Value := 1;
  Assert.AreEqual(1, a.AsInteger);
  a.AsFloat := 1;
  Assert.AreEqual(1, a.AsInteger);
  a.AsLargeInt := 1;
  Assert.AreEqual(1, a.AsInteger);
  aObject := TJsonObject.Create;
  try
    a.WriteJsonValue(aObject);
    a.Value := 0;
    Assert.AreEqual(0, a.AsInteger);
    a.ReadJsonValue(aObject);
    Assert.AreEqual(1, a.AsInteger);
  finally
    aObject.Free
  end;

end;



initialization
  TDUnitX.RegisterTestFixture(TOrmTest);
end.
